apply plugin: 'com.android.library'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'slauth'

    libraryName = 'Slauth'
    artifact = 'slauth'

    libraryDescription = 'An Android wrapper around the rust Slauth implementation'

    siteUrl = 'https://github.com/Devolutions/Slauth'
    gitUrl = 'https://github.com/Devolutions/SlauthAndroid.git'

    libraryVersion = '0.1.0'

    developerId = 'rarchambault'
    developerName = 'Richer Archambault'
    developerEmail = 'rarchambault@devolutions.net'

    licenseName = 'MIT License'
    licenseUrl = 'https://raw.githubusercontent.com/Devolutions/SlauthAndroid/master/LICENSE'
    allLicenses = ["MIT"]
}

android {
    compileSdkVersion 28


    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "0.1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    runtimeOnly fileTree(dir: 'jniLibs', include: ['*.so'])
    implementation 'net.java.dev.jna:jna:5.3.1'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

apply {
    apply plugin: 'com.jfrog.bintray'

    version = libraryVersion

    if (project.hasProperty("android")) { // Android libraries
        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.srcDirs
        }

        task javadoc(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }
    } else { // Java libraries
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }

// Bintray
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    bintray {
        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")

        configurations = ['archives']
        pkg {
            repo = bintrayRepo
            name = bintrayName
            desc = libraryDescription
            websiteUrl = siteUrl
            vcsUrl = gitUrl
            licenses = allLicenses
            publish = true
            publicDownloadNumbers = true
            version {
                desc = libraryDescription
            }
        }
    }
}